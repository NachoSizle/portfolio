---
import ThemeToggle from "./ThemeToggle.astro";
import LanguagePicker from "./LanguagePicker.astro";
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const navLinks = [
  { href: "#about", label: t('nav.about') },
  { href: "#projects", label: t('nav.projects') },
  { href: "#contact", label: t('nav.contact') },
];
---

<style>
  :root.dark .scrolled-nav {
    background: rgba(30, 41, 59, 1);
    box-shadow: 0 2px 16px 0 rgba(0, 0, 0, 0.85);
    transition:
      background 0.2s,
      box-shadow 0.2s;
  }

  :root:not(.dark) .scrolled-nav {
    background: rgba(255, 255, 255, 1);
    box-shadow: 0 4px 20px 0 rgba(0, 0, 0, 0.85);
  }
</style>

<header class="sticky top-0 z-200 flex justify-center items-center p-4">
  <nav id="main-nav" class="flex gap-3.5 py-2 px-6 rounded-4xl items-center" role="navigation" aria-label="Main navigation">
    <!-- Enlaces de navegaciÃ³n (solo desktop) -->
    <div class="hidden md:flex gap-3.5 items-center">
      {
        navLinks.map((link) => (
          <a
            href={link.href}
            class="text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-gray-100 select-none"
          >
            {link.label}
          </a>
        ))
      }
    </div>

    <!-- Separador (solo desktop) -->
    <div class="hidden md:block h-6 w-px bg-gray-300 dark:bg-gray-700"></div>

    <!-- Controles (siempre visibles) -->
    <div class="flex gap-3 items-center">
      <LanguagePicker />
      <ThemeToggle />
    </div>
  </nav>
</header>

<script is:inline>
  (function () {
    const NAV_ID = 'main-nav';
    const nav = document.getElementById(NAV_ID);

    // Toggle scrolled-nav class based on scroll position (existing behaviour)
    function updateScrolledNav() {
      if (!nav) return;
      if (window.scrollY > 10) {
        nav.classList.add('scrolled-nav');
      } else {
        nav.classList.remove('scrolled-nav');
      }
    }

    window.addEventListener('scroll', updateScrolledNav, { passive: true });
    // Run once to set initial state
    updateScrolledNav();

    // Helper: compute header height (prefer the header element, fall back to nav)
    function getHeaderHeight() {
      const headerEl = document.querySelector('header');
      if (headerEl) return headerEl.getBoundingClientRect().height;
      return nav ? nav.getBoundingClientRect().height : 0;
    }

    // Smooth scroll to an element accounting for header height and a small gap
    function scrollToElementWithOffset(el, pushState = true) {
      if (!el) return;
      const headerHeight = getHeaderHeight();
      const top = el.getBoundingClientRect().top + window.scrollY - headerHeight;
      // Update URL hash without jumping
      if (pushState && typeof history !== 'undefined') {
        try {
          history.pushState(null, '', `#${el.id}`);
        } catch (e) {}
      }
      window.scrollTo({ top, behavior: 'smooth' });
    }

    // Delegate clicks on in-page anchors inside the nav
    if (nav) {
      nav.addEventListener('click', (ev) => {
        const anchor = ev.target instanceof Element ? ev.target.closest('a[href^="#"]') : null;
        if (!anchor) return;
        const href = anchor.getAttribute('href');
        if (!href || href === '#') return;
        const id = href.slice(1);
        const target = document.getElementById(id);
        if (!target) return; // leave default behaviour if no target
        ev.preventDefault();
        scrollToElementWithOffset(target);
      });
    }

    // If the page loads with a hash, adjust the initial scroll so the header doesn't cover the title
    document.addEventListener('DOMContentLoaded', () => {
      if (location.hash) {
        const id = location.hash.slice(1);
        const target = document.getElementById(id);
        if (target) {
          // Timeout to allow the browser to finish any native jump before we correct it
          setTimeout(() => scrollToElementWithOffset(target, false), 50);
        }
      }
    });
  })();
</script>
